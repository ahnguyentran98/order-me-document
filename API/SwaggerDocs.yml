openapi: 3.0.3
info:
  title: Order me app
  description: |-
    This is a simple web app for stores to enhance customer experiences by auto-taking ticket numbers and food ordering.
  contact:
    email: ahnguyentran0698@gmail.com
  license:
    name: ahnguyentran
    url: https://github.com/
  version: 1.0
servers:
  - url: https://order-me.swagger.io/api/v3

tags:
  - name: Menu
    description: Setting for store menu & price
  - name: Orders
    description: Manage orders for tables
  - name: Table Guest
    description: Manage table guest tickets
  - name: Table
    description: Manage tables
  - name: Tickets
    description: Manage tickets
  - name: Users
    description: Manage users and authentication

components:
  securitySchemes:
    xAuthToken:
      type: apiKey
      in: header
      name: x-auth-token

  schemas:
    Menu:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Pizza Margherita"
        price:
          type: number
          format: float
          example: 8.99

    Ticket:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_name:
          type: string
          example: "anh hao"
        phone:
          type: integer
          example: 0345802028
        ticket_num:
          type: integer
          example: 1

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_name:
          type: string
          example: "ahnguyentran"
        password:
          type: string
          example: "ahnguyen123"
        role:
          type: string
          example: "ADMIN"

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        food_id:
          type: integer
          example: 1
        table_guest_id:
          type: integer
          example: 1
        status:
          type: string
          example: "served"

    Table_guest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        ticket_id:
          type: integer
          example: 1
        table_id:
          type: integer
          example: 1

    Table:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "corner table"
        number:
          type: integer
          example: 1
        status:
          type: string
          example: "serving"

security:
  - xAuthToken: []

paths:
  /menu:
    get:
      tags:
        - Menu
      summary: Retrieve the menu
      description: Returns a list of menu items with their details.
      operationId: getMenu
      security:
        - xAuthToken: []
      responses:
        '200':
          description: A list of menu items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
        '500':
          description: Internal server error

    post:
      tags:
        - Menu
      summary: Create a new menu item
      description: Creates a new menu item and returns a confirmation.
      operationId: createMenu
      security:
        - xAuthToken: []
      requestBody:
        description: The menu item data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
      responses:
        '201':
          description: Menu item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '500':
          description: Internal server error

  /menu/{id}:
    put:
      tags:
        - Menu
      summary: Update a menu item
      description: Updates a menu item by its ID.
      operationId: updateMenu
      security:
        - xAuthToken: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the menu item to update
          schema:
            type: integer
      requestBody:
        description: The menu item data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
      responses:
        '200':
          description: The updated menu item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '404':
          description: Menu item not found
        '500':
          description: Internal server error

  /orders/{table_id}:
    post:
      tags:
        - Orders
      summary: Create a new order for a table
      operationId: createOrder
      security:
        - xAuthToken: []
      parameters:
        - name: table_id
          in: path
          required: true
          description: The ID of the table
          schema:
            type: integer
      requestBody:
        description: Order data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '500':
          description: Internal server error

    get:
      tags:
        - Orders
      summary: Get orders by table ID
      operationId: getOrdersByTable
      security:
        - xAuthToken: []
      parameters:
        - name: table_id
          in: path
          required: true
          description: The ID of the table
          schema:
            type: integer
      responses:
        '200':
          description: List of orders for the table
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Internal server error

  /orders/{order_id}:
    put:
      tags:
        - Orders
      summary: Update an order by ID
      operationId: updateOrder
      security:
        - xAuthToken: []
      parameters:
        - name: order_id
          in: path
          required: true
          description: The ID of the order to update
          schema:
            type: integer
      requestBody:
        description: Order data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: The updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '500':
          description: Internal server error

  /tables/{table_id}/ticket/{ticket_id}:
    post:
      tags:
        - Table Guest
      summary: Attach a ticket to a table
      operationId: attachTableTicket
      security:
        - xAuthToken: []
      parameters:
        - name: table_id
          in: path
          required: true
          description: The ID of the table
          schema:
            type: integer
        - name: ticket_id
          in: path
          required: true
          description: The ID of the ticket
          schema:
            type: integer
      responses:
        '200':
          description: Ticket attached successfully
        '404':
          description: Table or ticket not found
        '500':
          description: Internal server error

  /tables:
    post:
      tags:
        - Table
      summary: Create a new table
      operationId: createTable
      security:
        - xAuthToken: []
      requestBody:
        description: Table data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        '201':
          description: Table created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '500':
          description: Internal server error

  /tables/{id}:
    get:
      tags:
        - Table
      summary: Get a table by ID
      operationId: getTable
      security:
        - xAuthToken: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the table
          schema:
            type: integer
      responses:
        '200':
          description: Table data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '404':
          description: Table not found
        '500':
          description: Internal server error

    delete:
      tags:
        - Table
      summary: Delete a table by ID
      operationId: deleteTable
      security:
        - xAuthToken: []
      parameters:
        - name: table_id
          in: path
          required: true
          description: The ID of the table to delete
          schema:
            type: integer
      responses:
        '204':
          description: Table deleted successfully
        '404':
          description: Table not found
        '500':
          description: Internal server error

  /tickets:
    post:
      tags:
        - Tickets
      summary: Create a new ticket
      operationId: createTicket
      security:
        - xAuthToken: []
      requestBody:
        description: Ticket data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '201':
          description: Ticket created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '500':
          description: Internal server error

    get:
      tags:
        - Tickets
      summary: Get all tickets
      operationId: getAllTickets
      security:
        - xAuthToken: []
      responses:
        '200':
          description: List of all tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '500':
          description: Internal server error

  /tickets/tables/{table_id}:
    get:
      tags:
        - Tickets
      summary: Get tickets by table ID
      operationId: getTicketsByTable
      security:
        - xAuthToken: []
      parameters:
        - name: table_id
          in: path
          required: true
          description: The ID of the table
          schema:
            type: integer
      responses:
        '200':
          description: Ticket data for the table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Ticket or table not found
        '500':
          description: Internal server error

  /tickets/{id}:
    put:
      tags:
        - Tickets
      summary: Update a ticket by ID
      operationId: updateTicket
      security:
        - xAuthToken: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the ticket to update
          schema:
            type: integer
      requestBody:
        description: Ticket data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          description: The updated ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Ticket not found
        '500':
          description: Internal server error

  /users:
    post:
      tags:
        - Users
      summary: Admin creates a user
      operationId: createUser
      security:
        - xAuthToken: []
      requestBody:
        description: User data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal server error

    get:
      tags:
        - Users
      summary: Admin retrieves all users
      operationId: getAllUsers
      security:
        - xAuthToken: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error

  /users/{user_id}:
    delete:
      tags:
        - Users
      summary: Admin deletes a user by ID
      operationId: deleteUser
      security:
        - xAuthToken: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Internal server error

  /users/login:
    post:
      tags:
        - Users
      summary: User login
      operationId: loginUser
      requestBody:
        description: Login information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  example: "ahnguyentran"
                password:
                  type: string
                  example: "ahnguyen123"
      responses:
        '200':
          description: Login successful, returns basic user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  user_name:
                    type: string
                    example: "ahnguyentran"
                  role:
                    type: string
                    example: "ADMIN"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Unauthorized, invalid credentials
        '500':
          description: Internal server error
